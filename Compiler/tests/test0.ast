(program let (declseg (typedecls (typedecl type cat := (type int) ;) (typedecls (typedecl type dog := (type cat) ;) (typedecls (typedecl type int_arr := (type array [ 100 ] of (type int)) ;) typedecls))) (vardecls (vardecl var (ids a) : (type int) optinit ;) (vardecls (vardecl var (ids b) : (type int) optinit ;) (vardecls (vardecl var (ids doge) : (type dog) optinit ;) (vardecls (vardecl var (ids meow) : (type cat) optinit ;) (vardecls (vardecl var (ids c) : (type float) optinit ;) (vardecls (vardecl var (ids d) : (type int_arr) optinit ;) (vardecls (vardecl var (ids e) : (type int) (optinit := (const 7)) ;) (vardecls (vardecl var (ids f) : (type cat) (optinit := (const 7)) ;) (vardecls (vardecl var (ids g) : (type int_arr) (optinit := (const 89)) ;) (vardecls (vardecl var (ids i) : (type int) optinit ;) vardecls)))))))))) (funcdecls (funcdecl func add ( (params (neparams (param addend1 : (type int)) , (neparams (param addend2 : (type int))))) ) (optrettype : (type int)) begin (stmts (fullstmt (stmt return (numexpr (numexpr (term (factor addend1))) (linop +) (term (factor addend2)))) ;)) end ;) (funcdecls (funcdecl func nada ( (params (neparams (param hola : (type int)))) ) optrettype begin (stmts (fullstmt (stmt (lvalue hola optoffset) := (numexpr (term (factor (const 1))))) ;)) end ;) (funcdecls (funcdecl func broken1 ( params ) (optrettype : (type int)) begin (stmts (fullstmt (stmt if (boolexpr (clause (pred ( (boolexpr (clause (pred (numexpr (term (factor (const 1)))) (boolop >) (numexpr (term (factor (const 2))))))) )))) then (stmts (fullstmt (stmt return (numexpr (term (factor (const 1))))) ;)) endif) ;)) end ;) funcdecls)))) in (stmts (fullstmt (stmt (lvalue d optoffset) := (numexpr (term (factor (const 78))))) ;) (stmts (fullstmt (stmt (lvalue a optoffset) := (numexpr (term (factor (const 1))))) ;) (stmts (fullstmt (stmt (lvalue b optoffset) := (numexpr (term (factor (const 2))))) ;) (stmts (fullstmt (stmt optstore nada ( (numexprs (neexprs (numexpr (term (factor (const 7)))))) )) ;) (stmts (fullstmt (stmt optstore broken1 ( numexprs )) ;) (stmts (fullstmt (stmt optstore add ( (numexprs (neexprs (numexpr (term (factor (const 1)))) , (neexprs (numexpr (term (factor b)))))) )) ;) (stmts (fullstmt (stmt (lvalue a optoffset) := (numexpr (term (factor (const 2))))) ;) (stmts (fullstmt (stmt (optstore (lvalue a optoffset) :=) add ( (numexprs (neexprs (numexpr (term (factor a))) , (neexprs (numexpr (term (factor b)))))) )) ;) (stmts (fullstmt (stmt (lvalue a optoffset) := (numexpr (term (term (factor ( (numexpr (numexpr (term (factor a))) (linop +) (term (factor (const 3)))) ))) (nonlinop *) (factor (const 2))))) ;) (stmts (fullstmt (stmt (lvalue d (optoffset [ (numexpr (term (factor a))) ])) := (numexpr (term (factor d [ (numexpr (term (factor (const 3)))) ])))) ;) (stmts (fullstmt (stmt (lvalue d (optoffset [ (numexpr (term (factor d [ (numexpr (term (factor (const 3)))) ]))) ])) := (numexpr (term (factor b)))) ;) (stmts (fullstmt (stmt (lvalue d optoffset) := (numexpr (term (factor (const 3))))) ;) (stmts (fullstmt (stmt if (boolexpr (clause (pred ( (boolexpr (clause (pred (numexpr (term (factor a))) (boolop >) (numexpr (term (factor b)))))) )))) then (stmts (fullstmt (stmt (lvalue a optoffset) := (numexpr (term (factor (const 3))))) ;) (stmts (fullstmt (stmt (lvalue b optoffset) := (numexpr (term (factor (const 5))))) ;))) else (stmts (fullstmt (stmt (lvalue a optoffset) := (numexpr (term (factor (const 2))))) ;) (stmts (fullstmt (stmt if (boolexpr (clause (pred ( (boolexpr (clause (pred (numexpr (term (factor a))) (boolop <) (numexpr (term (factor b)))))) )))) then (stmts (fullstmt (stmt (lvalue b optoffset) := (numexpr (term (factor (const 4))))) ;)) endif) ;))) endif) ;) (stmts (fullstmt (stmt while (boolexpr (clause (pred ( (boolexpr (clause (pred (numexpr (term (factor a))) (boolop <>) (numexpr (term (factor (const 1))))))) )))) do (stmts (fullstmt (stmt (lvalue a optoffset) := (numexpr (term (factor (const 1))))) ;)) enddo) ;) (stmts (fullstmt (stmt for a := (numexpr (term (factor (const 1)))) to (numexpr (term (factor (const 5)))) do (stmts (fullstmt (stmt (lvalue d (optoffset [ (numexpr (term (factor a))) ])) := (numexpr (term (factor (const 1))))) ;) (stmts (fullstmt (stmt while (boolexpr (clause (pred ( (boolexpr (clause (pred (numexpr (term (factor (const 1)))) (boolop =) (numexpr (term (factor (const 1))))))) )))) do (stmts (fullstmt (stmt break) ;)) enddo) ;) (stmts (fullstmt (stmt (lvalue i optoffset) := (numexpr (term (factor (const 101))))) ;)))) enddo) ;) (stmts (fullstmt (stmt (lvalue i optoffset) := (numexpr (term (factor (const 595))))) ;))))))))))))))))) end)

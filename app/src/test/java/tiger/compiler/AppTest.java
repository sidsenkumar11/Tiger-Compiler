/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tiger.compiler;

import org.junit.jupiter.api.Test;
import tiger.compiler.interpreter.IRGenException;
import tiger.compiler.parser.ParseException;
import tiger.compiler.typechecker.TypeCheckException;
import static org.junit.jupiter.api.Assertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

class AppTest {

    private void compareAstsFromFolder(String folderName) {
        Path currentPath = Paths.get(System.getProperty("user.dir"));
        Path filePath = Paths.get(currentPath.toString(), "bin", "test", folderName);
        File folder = filePath.toFile();
        File[] listOfFiles = folder.listFiles();

        var failCount = 0;
        var testCount = 0;
        for (int i = 0; i < listOfFiles.length; i++) {
            if (!listOfFiles[i].isFile()) {
                continue;
            }

            var sourceFile = listOfFiles[i].getName();
            if (!sourceFile.endsWith(".tgr")) {
                continue;
            }

            // if (!sourceFile.endsWith("func_ret.tgr")) {
            // continue;
            // }

            testCount++;
            var sourceFilePath = listOfFiles[i].getAbsolutePath();
            var astFilePath = sourceFilePath.replace(".tgr", ".ast");
            try {
                System.out.println(sourceFile);
                var astString = App.ParseString(sourceFilePath).strip();
                var solnString = Files.readString(Path.of(astFilePath)).strip();
                // System.err.println(astString);
                if (!astString.equals(solnString)) {
                    System.err.println("--> FAIL - Did not match");
                    failCount++;
                }
            } catch (IOException e) {
                e.printStackTrace();
                failCount++;
            } catch (ParseException e) {
                System.err.println(
                        "--> FAIL - Unable to parse");
                failCount++;
            } catch (TypeCheckException e) {
                System.err.println(
                        "--> FAIL - Unexpected typechecking failure");
                failCount++;
            }
        }

        System.out.println("Failed " + failCount + "/" + testCount + " tests!");
        assertTrue(failCount == 0);
    }

    private void typeCheckTests(String folderName) {
        Path currentPath = Paths.get(System.getProperty("user.dir"));
        Path filePath = Paths.get(currentPath.toString(), "bin", "test", folderName);
        File folder = filePath.toFile();
        File[] listOfFiles = folder.listFiles();

        var failCount = 0;
        var testCount = 0;
        for (int i = 0; i < listOfFiles.length; i++) {
            if (!listOfFiles[i].isFile()) {
                continue;
            }

            var sourceFile = listOfFiles[i].getName();
            if (!sourceFile.endsWith(".tgr")) {
                continue;
            }

            // if (!sourceFile.endsWith("var_type_bef_use_bad.tgr")) {
            // continue;
            // }

            testCount++;
            var sourceFilePath = listOfFiles[i].getAbsolutePath();
            var shouldFail = sourceFile.endsWith("_bad.tgr");
            try {
                System.out.println(sourceFile);
                App.ParseAndTypeCheck(sourceFilePath);
                if (shouldFail) {
                    System.err.println("--> FAIL - Should have failed type checking");
                    failCount++;
                }
            } catch (IOException e) {
                e.printStackTrace();
                failCount++;
            } catch (ParseException | TypeCheckException e) {
                if (!shouldFail) {
                    System.err.println(
                            "--> FAIL - Should NOT have failed parsing / type checking");
                    System.err.println("--> " + e.getMessage());
                    failCount++;
                }
            }
        }

        System.out.println("Failed " + failCount + "/" + testCount + " tests!");
        assertTrue(failCount == 0);
    }

    private void interpreterTests(String folderName) {
        Path currentPath = Paths.get(System.getProperty("user.dir"));
        Path filePath = Paths.get(currentPath.toString(), "bin", "test", folderName);
        File folder = filePath.toFile();
        File[] listOfFiles = folder.listFiles();

        var failCount = 0;
        var testCount = 0;
        for (int i = 0; i < listOfFiles.length; i++) {
            if (!listOfFiles[i].isFile()) {
                continue;
            }

            var sourceFile = listOfFiles[i].getName();
            if (!sourceFile.endsWith(".tgr")) {
                continue;
            }

            // if (sourceFile.endsWith("while.tgr")) {
            // continue;
            // }

            testCount++;
            var sourceFilePath = listOfFiles[i].getAbsolutePath();
            var inputFilePath = sourceFilePath.replace(".tgr", "_in");
            var outputFilePath = sourceFilePath.replace(".tgr", "_out");
            try {
                System.out.println(sourceFile);

                // Read file into InputStream
                var testInput = Files.readString(Path.of(inputFilePath));
                byte[] bytes = testInput.getBytes(StandardCharsets.UTF_8);
                InputStream inputStream = new ByteArrayInputStream(bytes);

                // Initialize PrintWriter and run test
                StringWriter stringWriter = new StringWriter();
                try (PrintWriter printWriter = new PrintWriter(stringWriter)) {
                    App.Interpret(sourceFilePath, inputStream, printWriter);
                }

                // Compare outputs
                var output = stringWriter.toString().strip().replace("\r", "");
                var expectedOutput =
                        Files.readString(Path.of(outputFilePath)).strip().replace("\r", "");
                if (!output.equals(expectedOutput)) {
                    System.err.println(
                            "--> FAIL - Output does not match");
                    failCount++;
                    System.out.println("------------------");
                    System.out.println(output);
                    System.out.println("------------------");
                    System.out.println(expectedOutput);
                    System.out.println("------------------");
                }
            } catch (IOException e) {
                e.printStackTrace();
                failCount++;
            } catch (ParseException | TypeCheckException | IRGenException e) {
                System.err.println(
                        "--> FAIL - Should NOT have failed parsing / type checking / IR code generation");
                System.err.println("--> " + e.getMessage());
                failCount++;
            } catch (Exception e) {
                System.err.println(
                        "--> FAIL - Unexpected error");
                e.printStackTrace();
                failCount++;
            }
        }

        System.out.println("Failed " + failCount + "/" + testCount + " tests!");
        assertTrue(failCount == 0);
    }

    @Test
    void p1tests() {
        this.compareAstsFromFolder("p1tests");
    }

    @Test
    void p1gradedtests() {
        this.compareAstsFromFolder("p1gradedtests");
    }

    @Test
    void p2tests() {
        this.typeCheckTests("p2tests");
    }

    @Test
    void p3tests() {
        this.interpreterTests("p3tests");
    }
}

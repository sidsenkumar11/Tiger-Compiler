(program let (declseg (typedecls (typedecl type arrayint := (type array [ 100 ] of (type int)) ;) typedecls) (vardecls (vardecl var (ids x , (ids y)) : (type arrayint) (optinit := (const 10)) ;) (vardecls (vardecl var (ids i , (ids sum)) : (type int) (optinit := (const 0)) ;) vardecls)) funcdecls) in (stmts (fullstmt (stmt for i := (numexpr (term (factor (const 1)))) to (numexpr (term (factor (const 100)))) do (stmts (fullstmt (stmt (lvalue sum optoffset) := (numexpr (numexpr (term (factor sum))) (linop +) (term (term (factor x [ (numexpr (term (factor i))) ])) (nonlinop *) (factor y [ (numexpr (term (factor i))) ])))) ;)) enddo) ;) (stmts (fullstmt (stmt optstore printi ( (numexprs (neexprs (numexpr (term (factor sum))))) )) ;))) end)

Nonterminal,let,in,end,type,id,:=,;,int,float,array,[,intlit,],of,var,:,?,func,(,),begin,if,then,endif,else,while,do,enddo,for,to,break,return,|,&,=,<>,<=,>=,<,>,+,-,*,/,floatlit,$
program,program -> let declseg in stmts end,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
declseg,NULL,declseg -> typedecls vardecls funcdecls,NULL,declseg -> typedecls vardecls funcdecls,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,declseg -> typedecls vardecls funcdecls,NULL,NULL,declseg -> typedecls vardecls funcdecls,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
typedecls,NULL,typedecls -> '',NULL,typedecls -> typedecl typedecls,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,typedecls -> '',NULL,NULL,typedecls -> '',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
typedecl,NULL,NULL,NULL,typedecl -> type id := typeT ;,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
typeT,NULL,NULL,NULL,NULL,typeT -> id,NULL,NULL,typeT -> int,typeT -> float,typeT -> array [ intlit ] of typeT,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
vardecls,NULL,vardecls -> '',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,vardecls -> vardecl vardecls,NULL,NULL,vardecls -> '',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
vardecl,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,vardecl -> var ids : typeT optinit ;,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
ids,NULL,NULL,NULL,NULL,ids -> id ids',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
ids',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,ids' -> '',ids' -> ? id ids',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
optinit,NULL,NULL,NULL,NULL,NULL,optinit -> := const,optinit -> '',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
funcdecls,NULL,funcdecls -> '',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,funcdecls -> funcdecl funcdecls,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
funcdecl,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,funcdecl -> func id ( params ) optrettype begin stmts end ;,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
params,NULL,NULL,NULL,NULL,params -> neparams,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,params -> '',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
neparams,NULL,NULL,NULL,NULL,neparams -> param neparams',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
neparams',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,neparams' -> ? param neparams',NULL,NULL,neparams' -> '',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
param,NULL,NULL,NULL,NULL,param -> id : typeT,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
optrettype,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,optrettype -> : typeT,NULL,NULL,NULL,NULL,optrettype -> '',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
stmts,NULL,NULL,stmts -> fullstmt stmts zzz stmts -> '',NULL,stmts -> fullstmt stmts,NULL,stmts -> fullstmt stmts,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,stmts -> fullstmt stmts,NULL,stmts -> fullstmt stmts zzz stmts -> '',stmts -> fullstmt stmts zzz stmts -> '',stmts -> fullstmt stmts,NULL,stmts -> fullstmt stmts zzz stmts -> '',stmts -> fullstmt stmts,NULL,stmts -> fullstmt stmts,stmts -> fullstmt stmts,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
fullstmt,NULL,NULL,fullstmt -> stmt ;,NULL,fullstmt -> stmt ;,NULL,fullstmt -> stmt ;,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,fullstmt -> stmt ;,NULL,fullstmt -> stmt ;,fullstmt -> stmt ;,fullstmt -> stmt ;,NULL,fullstmt -> stmt ;,fullstmt -> stmt ;,NULL,fullstmt -> stmt ;,fullstmt -> stmt ;,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
stmt,NULL,NULL,NULL,NULL,stmt -> lvalue := numexpr zzz stmt -> optstore id ( numexprs ) ,NULL,stmt -> optstore id ( numexprs ),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,stmt -> if boolexpr then stmts stmt',NULL,NULL,NULL,stmt -> while boolexpr do stmts enddo,NULL,NULL,stmt -> for id := numexpr to numexpr do stmts enddo,NULL,stmt -> break,stmt -> return numexpr,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
stmt',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,stmt' -> endif,stmt' -> else stmts endif,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
lvalue,NULL,NULL,NULL,NULL,lvalue -> id optoffset,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
optoffset,NULL,NULL,NULL,NULL,NULL,optoffset -> '',NULL,NULL,NULL,NULL,optoffset -> [ numexpr ],NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
optstore,NULL,NULL,NULL,NULL,optstore -> lvalue := zzz optstore -> '',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
numexprs,NULL,NULL,NULL,NULL,numexprs -> neexprs,NULL,NULL,NULL,NULL,NULL,NULL,numexprs -> neexprs,NULL,NULL,NULL,NULL,NULL,NULL,numexprs -> neexprs,numexprs -> '',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,numexprs -> neexprs,NULL
neexprs,NULL,NULL,NULL,NULL,neexprs -> numexpr neexprs',NULL,NULL,NULL,NULL,NULL,NULL,neexprs -> numexpr neexprs',NULL,NULL,NULL,NULL,NULL,NULL,neexprs -> numexpr neexprs',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,neexprs -> numexpr neexprs',NULL
neexprs',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,neexprs' -> ? numexpr neexprs',NULL,NULL,neexprs' -> '',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
boolexpr,NULL,NULL,NULL,NULL,boolexpr -> clause boolexpr',NULL,NULL,NULL,NULL,NULL,NULL,boolexpr -> clause boolexpr',NULL,NULL,NULL,NULL,NULL,NULL,boolexpr -> clause boolexpr',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,boolexpr -> clause boolexpr',NULL
boolexpr',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,boolexpr' -> '',NULL,NULL,boolexpr' -> '',NULL,NULL,NULL,boolexpr' -> '',NULL,NULL,NULL,NULL,NULL,boolexpr' -> | clause boolexpr',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
clause,NULL,NULL,NULL,NULL,clause -> pred clause',NULL,NULL,NULL,NULL,NULL,NULL,clause -> pred clause',NULL,NULL,NULL,NULL,NULL,NULL,clause -> pred clause',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,clause -> pred clause',NULL
clause',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,clause' -> '',NULL,NULL,clause' -> '',NULL,NULL,NULL,clause' -> '',NULL,NULL,NULL,NULL,NULL,clause' -> '',clause' -> & pred clause',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
pred,NULL,NULL,NULL,NULL,pred -> numexpr boolop numexpr,NULL,NULL,NULL,NULL,NULL,NULL,pred -> numexpr boolop numexpr,NULL,NULL,NULL,NULL,NULL,NULL,pred -> numexpr boolop numexpr zzz pred -> ( boolexpr ),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,pred -> numexpr boolop numexpr,NULL
boolop,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,boolop -> =,boolop -> <>,boolop -> <=,boolop -> >=,boolop -> <,boolop -> >,NULL,NULL,NULL,NULL,NULL,NULL
numexpr,NULL,NULL,NULL,NULL,numexpr -> term numexpr',NULL,NULL,NULL,NULL,NULL,NULL,numexpr -> term numexpr',NULL,NULL,NULL,NULL,NULL,NULL,numexpr -> term numexpr',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,numexpr -> term numexpr',NULL
numexpr',NULL,NULL,NULL,NULL,NULL,NULL,numexpr' -> '',NULL,NULL,NULL,NULL,NULL,numexpr' -> '',NULL,NULL,NULL,numexpr' -> '',NULL,NULL,numexpr' -> '',NULL,NULL,numexpr' -> '',NULL,NULL,NULL,numexpr' -> '',NULL,NULL,numexpr' -> '',NULL,NULL,numexpr' -> '',numexpr' -> '',numexpr' -> '',numexpr' -> '',numexpr' -> '',numexpr' -> '',numexpr' -> '',numexpr' -> '',numexpr' -> linop term numexpr',numexpr' -> linop term numexpr',NULL,NULL,NULL,NULL
linop,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,linop -> +,linop -> -,NULL,NULL,NULL,NULL
term,NULL,NULL,NULL,NULL,term -> factor term',NULL,NULL,NULL,NULL,NULL,NULL,term -> factor term',NULL,NULL,NULL,NULL,NULL,NULL,term -> factor term',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,term -> factor term',NULL
term',NULL,NULL,NULL,NULL,NULL,NULL,term' -> '',NULL,NULL,NULL,NULL,NULL,term' -> '',NULL,NULL,NULL,term' -> '',NULL,NULL,term' -> '',NULL,NULL,term' -> '',NULL,NULL,NULL,term' -> '',NULL,NULL,term' -> '',NULL,NULL,term' -> '',term' -> '',term' -> '',term' -> '',term' -> '',term' -> '',term' -> '',term' -> '',term' -> '',term' -> '',term' -> nonlinop factor term',term' -> nonlinop factor term',NULL,NULL
nonlinop,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,nonlinop -> *,nonlinop -> /,NULL,NULL
factor,NULL,NULL,NULL,NULL,factor -> id factor',NULL,NULL,NULL,NULL,NULL,NULL,factor -> const,NULL,NULL,NULL,NULL,NULL,NULL,factor -> ( numexpr ),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,factor -> const,NULL
factor',NULL,NULL,NULL,NULL,NULL,NULL,factor' -> '',NULL,NULL,NULL,factor' -> [ numexpr ],NULL,factor' -> '',NULL,NULL,NULL,factor' -> '',NULL,NULL,factor' -> '',NULL,NULL,factor' -> '',NULL,NULL,NULL,factor' -> '',NULL,NULL,factor' -> '',NULL,NULL,factor' -> '',factor' -> '',factor' -> '',factor' -> '',factor' -> '',factor' -> '',factor' -> '',factor' -> '',factor' -> '',factor' -> '',factor' -> '',factor' -> '',NULL,NULL
const,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,const -> intlit,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,const -> floatlit,NULL

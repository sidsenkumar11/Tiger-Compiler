Keyword let
Keyword var
Id a
Keyword ,
Id b
Keyword ,
Id c
Keyword :
Keyword int
Keyword ;
Keyword var
Id d
Keyword ,
Id e
Keyword ,
Id f
Keyword :
Keyword float
Keyword ;
Keyword func
Id fact
Keyword (
Id n
Keyword :
Keyword int
Keyword )
Keyword :
Keyword int
Keyword begin
Keyword if
Keyword (
Id n
Keyword =
Intlit 0
Keyword )
Keyword then
Keyword return
Intlit 1
Keyword ;
Keyword endif
Keyword ;
Keyword if
Keyword (
Id n
Keyword =
Intlit 1
Keyword )
Keyword then
Keyword return
Intlit 1
Keyword ;
Keyword endif
Keyword ;
Id a
Keyword :=
Id fact
Keyword (
Id n
Keyword -
Intlit 1
Keyword )
Keyword ;
Keyword return
Id n
Keyword *
Id a
Keyword ;
Keyword end
Keyword ;
Keyword func
Id factf
Keyword (
Id n
Keyword :
Keyword float
Keyword )
Keyword :
Keyword float
Keyword begin
Keyword if
Keyword (
Id n
Keyword <=
Intlit 0
Keyword )
Keyword then
Keyword return
Intlit 1
Keyword ;
Keyword endif
Keyword ;
Keyword if
Keyword (
Id n
Keyword <=
Intlit 1
Keyword )
Keyword then
Keyword return
Intlit 1
Keyword ;
Keyword endif
Keyword ;
Id d
Keyword :=
Id factf
Keyword (
Id n
Keyword -
Intlit 1
Keyword )
Keyword ;
Keyword return
Id n
Keyword *
Id d
Keyword ;
Keyword end
Keyword ;
Keyword in
Id c
Keyword :=
Id fact
Keyword (
Intlit 6
Keyword )
Keyword ;
Id printi
Keyword (
Id c
Keyword )
Keyword ;
Id f
Keyword :=
Id factf
Keyword (
floatlit? Entered
Keyword )
Keyword ;
Id printf
Keyword (
Id f
Keyword )
Keyword ;
Keyword if
Keyword (
Id c
Keyword =
Id f
Keyword )
Keyword then
Id printi
Keyword (
Intlit 1
Keyword )
Keyword ;
Keyword endif
Keyword ;
Keyword end
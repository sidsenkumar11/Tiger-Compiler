program -> let declseg in stmts end
declseg -> typedecls vardecls funcdecls
typedecls -> ''
typedecls -> typedecl typedecls
typedecl -> type id := typeT ;
typeT -> int
typeT -> float
typeT -> id
typeT -> array [ intlit ] of typeT
vardecls -> ''
vardecls -> vardecl vardecls
vardecl -> var ids : typeT optinit ;
ids -> id ids'
ids' -> , id ids'
ids' -> ''
optinit -> ''
optinit -> := const
funcdecls -> ''
funcdecls -> funcdecl funcdecls
funcdecl -> func id ( params ) optrettype begin stmts end ;
params -> ''
params -> neparams
neparams -> param neparams'
neparams' -> , param neparams'
neparams' -> ''
param -> id : typeT
optrettype -> ''
optrettype -> : typeT
stmts -> fullstmt stmts
stmts -> ''
fullstmt -> stmt ;
stmt -> lvalue := numexpr
stmt -> if boolexpr then stmts stmt'
stmt' -> endif
stmt' -> else stmts endif
stmt -> while boolexpr do stmts enddo
stmt -> for id := numexpr to numexpr do stmts enddo
stmt -> optstore id ( numexprs )
stmt -> break
stmt -> return numexpr
lvalue -> id optoffset
optoffset -> ''
optoffset -> [ numexpr ]
optstore -> ''
optstore -> lvalue :=
numexprs -> ''
numexprs -> neexprs
neexprs -> numexpr neexprs'
neexprs' -> , numexpr neexprs'
neexprs' -> ''
boolexpr -> clause boolexpr'
boolexpr' -> | clause boolexpr'
boolexpr' -> ''
clause -> pred clause'
clause' -> & pred clause'
clause' -> ''
pred -> numexpr boolop numexpr
pred -> ( boolexpr )
boolop -> =
boolop -> <>
boolop -> <=
boolop -> >=
boolop -> <
boolop -> >
numexpr -> term numexpr'
numexpr' -> linop term numexpr'
numexpr' -> ''
linop -> +
linop -> -
term -> factor term'
term' -> nonlinop factor term'
term' -> ''
nonlinop -> *
nonlinop -> /
factor -> const
factor -> id factor'
factor' -> [ numexpr ]
factor' -> ''
factor -> ( numexpr )
const -> intlit
const -> floatlit
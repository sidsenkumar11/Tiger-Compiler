let
	type wut := int;
	type wat := float;
	type hello := wut;
	type world := wat;
	
	var a, b, c : hello := 9;
	var d, e, f : world := 42.0;
	
	var g, i, j : bool := false;
	
	var h : array[10] of hello;
	var k : array[10] of float;
	
	var wat : array[5] of array[5] of hello;
	
	func myFunc(arg1 : int, arg2 : world) : world begin
		if arg1 = arg2 then
			return h[4];
		else
			if arg1 = arg2 then
				return 0;
			else
				return arg1 + arg1 + arg2 * 1000;
			endif;
		endif;
	end;
	
	func test(a : array[10] of float) : int begin
		h[4] := h[4];
		a := k;
		myFunc(3, 4);
		
		if(g & i | j | a[4] < 100) then
			for b := 0 to 9 do
				if(b = 4) then
					break;
				endif;
				
				while(b < 9) do
					break;
				enddo;
				
				printi(42);
			enddo;
		endif;
		
		if 3 = 4 then
			printi(3);
		endif;
		
		while d = ((4.3) * (55 + 32) / (122.2 - 44)) do
			h[3] := 4;
		enddo;
		
		for b := 44 to 69 do
			myFunc(b, 3.0);
			
			for c := 1 to 100 do
				myFunc(c, 1337);
				break;
			enddo;
			
			break;
		enddo;
		
		printi(2);
		return 2;
	end;
	
	func printi() begin
		h[4] := 10000;
	end;
in
	h[4] := h[4];
	myFunc(3, 4);
	
	f := myFunc(a, f);
	
	h := wat[3];
	a := h[4];
	
	if 3 = 4 then
		printi(3);
	endif;
	
	while d = 4.3 do
		h[3] := 4;
	enddo;
	
	for b := 44 to 69 do
		myFunc(b, 3.0);
		
		for c := 1 to 100 do
			myFunc(c, 1337);
			break;
		enddo;
		
		break;
	enddo;
end
